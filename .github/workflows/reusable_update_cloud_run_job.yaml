name: Update Cloud Run image tag

on:
  workflow_call:
    inputs:
      image_tag:
        required: true
        type: string
      environment:
        required: false
        type: string
      job_project_id:
        required: true
        type: string
      job_group_label:
        required: true
        type: string
    secrets:
      workload_identity_provider:
        required: true
      service_account:
        required: true


permissions:
  contents: read
  id-token: write
  pull-requests: write


jobs:
  update-job-image-tag:
    name: Update Cloud Run job image tag
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - id: authenticate_with_gcp
        uses: google-github-actions/auth@v0.8.1
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          access_token_lifetime: 60s

      - id: setup_python
        name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - id: install_requests
        run: |
          pip install requests
          pip install aiohttp

      - id: get_jobs_for_update
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import requests
            import json

            headers = {"Authorization": f"Bearer ${{ steps.authenticate_with_gcp.outputs.access_token }}"}
            response = requests.get(
              "https://run.googleapis.com/v2/projects/${{ inputs.job_project_id }}/locations/europe-north1/jobs", 
              headers=headers
            ).json()
            
            print(response)
            
            jobs_to_update = []
            for job in response["jobs"]:
              if job.get("labels") and job["labels"].get("group") == "${{ inputs.job_group_label }}":
                jobs_to_update.append(job)
            
            with open(os.environ['GITHUB_OUTPUT'], 'a') as file:
              print(f"jobs_to_update={json.dumps(jobs_to_update)}", file=file)

      - id: update_job_body
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import json 

            jobs_to_update = list(${{ steps.get_jobs_for_update.outputs.jobs_to_update }})
            
            image_tag = "${{ inputs.image_tag }}"
            
            for job in jobs_to_update:
              for container in job["template"]["template"]["containers"]:
                container["image"] = image_tag
            
            print(jobs_to_update)
            
            with open(os.environ['GITHUB_OUTPUT'], 'a') as file:
              print(f"jobs_to_update={json.dumps(jobs_to_update)}", file=file)

      - id: update_job_image_tags
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import aiohttp
            import asyncio

            async def main():
              async with aiohttp.ClientSession() as session:
                image_tag = "${{ inputs.image_tag }}"

                jobs_to_update = list(${{ steps.update_job_body.outputs.jobs_to_update }})
                headers = {"Authorization": f"Bearer ${{ steps.authenticate_with_gcp.outputs.access_token }}"}
                for job in jobs_to_update:
                  job_name = job["name"].split("/")[-1]
                  url = f"https://run.googleapis.com/v2/projects/${{ inputs.job_project_id }}/locations/europe-north1/jobs/{job_name}"
                  async with session.patch(url, json=job, headers=headers) as response:
                    operation = await response.json()
                    print(operation)

            asyncio.run(main())
